#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ScreenPass.ush"
#include "RayTracingCommon.ush"

RWTexture2D<float4> OutputUAV;

Texture2D LastFrameResult;
Texture2D InRayTracingResult;

[numthreads(16, 16, 1)]
void RayTracingCS(
	int2 DispatchThreadID : SV_DispatchThreadID,
	uint3 GroupThreadID : SV_GroupThreadID)
{
	const uint2 ViewExtent = View.ViewSizeAndInvSize.xy;
	const uint2 PixelPos = DispatchThreadID.xy;
	const uint PixelIndex = PixelPos.y * ViewExtent.x + PixelPos.x;
	const float2 ScreenUV = (DispatchThreadID.xy + 0.5) * View.ViewSizeAndInvSize.zw;
	const float AspectRatio = View.ViewSizeAndInvSize.z / View.ViewSizeAndInvSize.w;

	ResolvedView = ResolveView();
	
	uint RngState = PixelIndex + ResolvedView.FrameNumber * 719393;

	float3 ScreenPos = float3(ScreenUV * 2 - 1, 1.0);
	ScreenPos.y *= -AspectRatio;
	
	FRay Ray;
	float3 TotalIncomingLight = 0;

	float4 LastFrameSceneColor = LastFrameResult.Load(int3(PixelPos, 0));
	
	// for (int RayIndex = 0; RayIndex < 100; RayIndex++)
	{
		float2 DefocusJitter = RandomPointInCircle(RngState) * 0.5 / ViewExtent.x;
		// Ray.Origin = float3(0, 0, 0) + float3(1, 0, 0) * DefocusJitter.x + float3(0, 1, 0) * DefocusJitter.y;
		Ray.Origin = float3(0, 0, 0);
		// float2 Jitter = RandomPointInCircle(RngState) * 0.5 / ViewExtent.x;
		Ray.Direction = normalize(ScreenPos - Ray.Origin);
	
		TotalIncomingLight += Trace(Ray, RngState);
	}

	TotalIncomingLight = lerp(LastFrameSceneColor.rgb, TotalIncomingLight, 1 / float(ResolvedView.FrameCounter + 1.0));

	OutputUAV[DispatchThreadID.xy] = float4(TotalIncomingLight, 1.0f);
}

void RayTracingOutPS(
	float4 SvPosition : SV_POSITION,
	out float4 OutValue : SV_Target0
	)
{
    float4 CurrentFrameSceneColor = InRayTracingResult.Load(int3(SvPosition.xy, 0));
	OutValue = CurrentFrameSceneColor;
}