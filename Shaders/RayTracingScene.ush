#pragma once

#define NUM_SPHERE 10
#define NUM_QUAD 1
#define NUM_TRIANGLE 1
#define NUM_PLANE 1

#define MAT_LIGHT 0
#define MAT_DIFFUSE 1
#define MAT_METAL 2
#define MAT_DIALECTRIC 3

struct FRayTracingMaterial
{
    uint Type;
    float4 Albedo;
    float Emission;
    float Roughness;
    float RefractiveIndex;
};

struct FRTMeshRenderData
{
    uint ID;
    float3 Position;
    float Radius;
    FRayTracingMaterial Material;
};

StructuredBuffer<FRTMeshRenderData> RTRenderDataBuffer;
uint NumMeshes;

struct FHitInfo
{
    bool bHit;
    float HitDistance;
    float3 HitPosition;
    float3 HitNormal;
    FRayTracingMaterial Material;
};

struct FRay
{
    float3 Origin;
    float3 Direction;
};

struct FQuad
{
    float3 Q;
    float3 A;
    float3 B;
    FRayTracingMaterial Material;
};

struct FSphere
{
    float3 Position;
    float Radius;
    FRayTracingMaterial Material;
};

struct FTriangle
{
    float3 A;
    float3 B;
    float3 C;
    float3 NormalA;
    float3 NormalB;
    float3 NormalC;
    FRayTracingMaterial Material;
};

struct FPlane
{
    float3 Normal;
    float3 P;
    FRayTracingMaterial Material;
};

// Albedo, Emission, Roughness, RefractiveIndex
FRayTracingMaterial LIGHT(float3 Albedo, float Emission)
{
    FRayTracingMaterial Material;
    Material.Type = MAT_LIGHT;
    Material.Albedo = float4(Albedo, 1.0);
    Material.Emission = Emission;
    Material.Roughness = 0;
    Material.RefractiveIndex = -1;
    return Material;
}

FRayTracingMaterial LAMBERT(float3 Albedo)
{
    FRayTracingMaterial Material;
    Material.Type = MAT_DIFFUSE;
    Material.Albedo = float4(Albedo, 1.0);
    Material.Emission = -1;
    Material.Roughness = 1;
    Material.RefractiveIndex = -1;
    return Material;
}

FRayTracingMaterial METAL(float3 Albedo, float Roughness)
{
    FRayTracingMaterial Material;
    Material.Type = MAT_METAL;
    Material.Albedo = float4(Albedo, 1.0);
    Material.Emission = -1;
    Material.Roughness = Roughness;
    Material.RefractiveIndex = -1;
    return Material;
}

FRayTracingMaterial GLASS(float3 Albedo, float RefractiveIndex)
{
    FRayTracingMaterial Material;
    Material.Type = MAT_DIALECTRIC;
    Material.Albedo = float4(Albedo, 1.0);
    Material.Emission = -1;
    Material.Roughness = 0;
    Material.RefractiveIndex = RefractiveIndex;
    return Material;
}
